name: Build

on: [push]

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs: 
  build_windows:
    name: Build [windows]
    runs-on: windows-latest

    strategy:
      matrix:
        inrule: [5.2.0, 5.3.1, 5.4.3, 5.5.1, 5.6.0, 5.7.1]

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Run SDK Build & Test
      env:
        InRule_Version: ${{ matrix.inrule }}
      run: ./build.ps1 --target TestSdk PublishSdkArtifacts

    - name: Run Authoring Build
      env:
        InRule_Version: ${{ matrix.inrule }}
      run: ./build.ps1 --target PublishAuthoringArtifacts --skip Clean

    - name: Upload artifacts
      if: matrix.inrule == '5.2.0'
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: artifacts
        retention-days: 1
  
  build_ubuntu:
    name: Build [ubuntu]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        inrule: [5.2.0, 5.3.1, 5.4.3, 5.5.1, 5.6.0, 5.7.1]

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Run SDK Build & Tests
      env:
        InRule_Version: ${{ matrix.inrule }}
      run: ./build.sh --target TestSdk

  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [ build_windows, build_ubuntu ]
    concurrency: build_${{ github.ref }}

    # only run this for a push to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts

    - name: Create release
      env:
        GitHub_Access_Token: ${{ secrets.GITHUB_TOKEN }}
      run: ./build.sh --target PublishToGitHub --skip PublishSdkArtifacts PublishAuthoringArtifacts